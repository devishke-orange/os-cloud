#!/bin/bash

exec 3>&1 1>>"$LOG_DIR/orangehrm_backup_restore.log" 2>&1
set -x
set -e

if [[ -z  $OHRM_DIR ]]; then
    printf "\nPlease run this script from the OrangeHRM command\n" >&3
    printf "i.e. orangehrm backup restore\n\n" >&3
    exit 1;
fi

ohrm_print "\n"
ohrm_print "This utility allows you to restore a created backup of your OrangeHRM installation\n\n"

# Check if any backups are available
if [[ ! -d "$BACKUP_DIR" || -z "$(ls -A "$BACKUP_DIR")" ]]; then
    ohrm_print "You have not created any backups!\n\n"
    exit 0
fi

answer=no

printf "%bWARNING%b: This will erase all data that has been added after the relevant backup\n" "$RC" "$EC" >&3
printf "Are you sure you want to continue? [%byes/no%b]\n" "$YC" "$EC" >&3
read -rp "> " answer 2>&3

while ! yes_no_check "$answer"; do
    printf "Please enter yes or no\n" >&3
    read -rp "> " answer 2>&3
done

quit_if_input "$NO_REGEX" "$answer" "Aborting backup restore process!"

backups=("$BACKUP_DIR"/*)
backupCount="${#backups[@]}"

ohrm_print "Please select a backup to restore from:\n"
ohrm_print "=========================================\n"
ohrm_print "No.\tVer.\tDate\t\tTime\n"
ohrm_print "=========================================\n"
# List Backups
for index in "${!backups[@]}"; do
    # shellcheck disable=SC1091
    source "${backups[index]}/.metadata"
    printf "%d\t%s\t%s\t%s\n" "$((index+1))" "$BACKUP_VERSION" "$DATE_OF_BACKUP" "$TIME_OF_BACKUP" >&3
    ohrm_print "=========================================\n"
done

selected=""

read -rp "Enter a number corresponding to a backup: " selected 2>&3

while true; do
    if [[ -n $selected && $selected -eq $selected && $selected -le $backupCount ]] ; then
        ohrm_print "\n"
        ohrm_print "Backup Details:\n"
        selected=$((selected-1))
        # shellcheck disable=SC1091
        source "${backups[selected]}/.metadata"
        printf "Backup Version: %s\n" "$BACKUP_VERSION" >&3
        printf "Date of Backup: %s\n" "$DATE_OF_BACKUP" >&3
        printf "Time of Backup: %s\n\n" "$TIME_OF_BACKUP" >&3

        answer="no"
        printf "Continue? [%byes/no%b]\n" "$YC" "$EC" >&3
        read -rp "> " answer 2>&3

        while ! yes_no_check "$answer"; do
            ohrm_print "Please enter yes or no\n"
            read -rp "> " answer 2>&3
        done

        if [[ $answer =~ $YES_REGEX ]]; then
            break
        fi
    else
        ohrm_print "Enter a valid number!\n"
    fi

    read -rp "Enter a number corresponding to a backup: " selected 2>&3
done

ohrm_print "A backup of your current system will be created before continuing\n\n"

orangehrm backup create >&3

ohrm_print "The backup you selected will now be restored\n\n"

print_progress_message "Extracting backup" wip
pushd "${backups[selected]}"
if ! [[ -f backup.tar ]]; then
    ohrm_print "This backup is not valid!\n"
    popd
    exit 1
fi

extractDir="$(echo $RANDOM | md5sum | head -c 10)"
mkdir "$extractDir"
tar -xf backup.tar -C "$extractDir"
print_progress_message "Extracting backup" success rewrite

print_progress_message "Shutting down containers" wip

if docker inspect "$ORANGEHRM_CONTAINER"; then
    docker stop "$ORANGEHRM_CONTAINER"
    docker rm "$ORANGEHRM_CONTAINER"
fi

if docker inspect "$CERTBOT_CONTAINER"; then
    docker stop "$CERTBOT_CONTAINER"
    docker rm "$CERTBOT_CONTAINER"
fi

if docker inspect "$MARIADB_CONTAINER"; then
    docker stop "$MARIADB_CONTAINER"
    docker rm "$MARIADB_CONTAINER"
fi

if docker volume inspect "$ORANGEHRM_WEBROOT_VOLUME"; then
    docker volume rm "$ORANGEHRM_WEBROOT_VOLUME"
fi

if docker volume inspect "$ORANGEHRM_DB_VOLUME"; then
    docker volume rm "$ORANGEHRM_DB_VOLUME"
fi

print_progress_message "Shutting down containers" success rewrite

print_progress_message "Copying config files" wip
cp -f "$extractDir/compose.yml" "$COMPOSE_FILE"
cp -f "$extractDir/.installed" "$INSTALL_FILE"
print_progress_message "Copying config files" success rewrite


print_progress_message "Starting containers" wip

# shellcheck source=/home/ec2-user/.orangehrm/.env
source "$ENV_FILE"
db_pw_decrypt="$(echo "$MARIADB_ROOT_PW" | base64 -d)"

# Create temporary env with decrypted password
printf "MARIADB_ROOT_PW=%s" "$db_pw_decrypt" > "$ENV_FILE.tmp"

docker compose --env-file "$ENV_FILE.tmp" --file "$COMPOSE_FILE" up --detach --remove-orphans

maintenance_mode enable
apache_enable_ssl
rm -f "$ENV_FILE.tmp"

print_progress_message "Starting containers" success rewrite

print_progress_message "Restoring OrangeHRM config" wip

docker cp "$extractDir/Conf.php" orangehrm:/var/www/html/lib/confs/Conf.php
if [[ -f "$extractDir/key.ohrm" ]]; then
    docker cp "$extractDir/key.ohrm" orangehrm:/var/www/html/lib/confs/cryptokeys/key.ohrm
fi
print_progress_message "Restoring OrangeHRM config" success rewrite

print_progress_message "Restoring database records" wip
sleep 5

docker exec -i mariadb sh -c "exec mariadb -uroot -p$db_pw_decrypt" < "$extractDir/mariadb.sql"
print_progress_message "Restoring database records" success rewrite

rm -rf "$extractDir"
popd

maintenance_mode disable

# shellcheck source=/home/ec2-user/.orangehrm/.installed
source "$INSTALL_FILE"
ohrm_print "\n"
printf "OrangeHRM %s backup successfully restored!\n\n" "$OHRM_VERSION" >&3

exit 0
